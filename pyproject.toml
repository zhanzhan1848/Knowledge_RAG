[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "knowledge-rag"
version = "0.1.0"
description = "Knowledge RAG System - A comprehensive RAG system for document processing and Q&A"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    {name = "Knowledge RAG Team", email = "team@knowledge-rag.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# Core dependencies for all services
dependencies = [
    # Web Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # Database
    "asyncpg>=0.29.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "alembic>=1.12.0",
    
    # Redis
    "redis[hiredis]>=5.0.0",
    
    # HTTP Client
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    
    # Data Processing
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    
    # Configuration
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-dotenv>=1.0.0",
    
    # Logging
    "structlog>=23.2.0",
    "python-json-logger>=2.0.0",
    
    # Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # Utilities
    "click>=8.1.0",
    "rich>=13.7.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    "bandit>=1.7.5",
]

# Document processing dependencies
document = [
    "pypdf2>=3.0.0",
    "python-docx>=1.1.0",
    "openpyxl>=3.1.0",
    "python-pptx>=0.6.23",
    "markdown>=3.5.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    "textract>=1.6.5",
]

# Vector database dependencies
vector = [
    "chromadb>=0.4.0",
    "faiss-cpu>=1.7.4",
    "weaviate-client>=3.25.0",
    "sentence-transformers>=2.2.0",
    "transformers>=4.35.0",
    "torch>=2.1.0",
    "numpy>=1.24.0",
]

# LLM integration dependencies
llm = [
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    "langchain>=0.0.350",
    "langchain-community>=0.0.10",
    "tiktoken>=0.5.0",
]

# Knowledge graph dependencies
knowledge_graph = [
    "neo4j>=5.14.0",
    "networkx>=3.2.0",
    "spacy>=3.7.0",
    "nltk>=3.8.0",
    "graphrag>=0.1.0",
    "microsoft-graphrag>=0.1.0",
]

# Monitoring dependencies
monitoring = [
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.42b0",
    "opentelemetry-exporter-jaeger>=1.21.0",
]

# Message queue dependencies
messaging = [
    "celery[redis]>=5.3.0",
    "kombu>=5.3.0",
    "pika>=1.3.0",
]

# All optional dependencies
all = [
    "knowledge-rag[dev,document,vector,llm,knowledge_graph,monitoring,messaging]"
]

[project.scripts]
knowledge-rag = "knowledge_rag.cli:main"

[tool.setuptools.packages.find]
where = ["services", "shared", "libs"]
include = ["*"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["services", "shared", "libs"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".eggs",
    "*.egg",
]

[project.urls]
Homepage = "https://github.com/knowledge-rag/knowledge-rag"
Documentation = "https://knowledge-rag.readthedocs.io/"
Repository = "https://github.com/knowledge-rag/knowledge-rag.git"
"Bug Tracker" = "https://github.com/knowledge-rag/knowledge-rag/issues"