# Vector Services Test Workflow for Knowledge RAG System
# 向量服务测试工作流，专门测试weaviate和text2vec-model2vec

name: Vector Services Test

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: '测试模式 (isolated/integrated)'
        required: true
        default: 'isolated'
        type: choice
        options:
        - isolated
        - integrated

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # ===========================================
  # 测试text2vec-model2vec服务
  # ===========================================
  test-text2vec:
    name: "测试text2vec-model2vec服务"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      text2vec-status: ${{ steps.text2vec-test.outputs.status }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create logs directory
      run: mkdir -p logs
      
    - name: Prepare environment
      run: |
        cp .env.template .env
        echo "OPENAI_API_KEY=test_key" >> .env
        echo "HUGGINGFACE_API_KEY=test_key" >> .env
        
    - name: Start text2vec-model2vec service
      id: start-text2vec
      run: |
        echo "启动text2vec-model2vec服务..." | tee logs/text2vec.log
        docker compose -f docker-compose.core.yml up -d text2vec-model2vec 2>&1 | tee -a logs/text2vec.log
        
    - name: Wait for text2vec-model2vec readiness
      run: |
        echo "等待text2vec-model2vec服务就绪..." | tee -a logs/text2vec.log
        
        # 启用健康检查
        echo "临时启用text2vec-model2vec健康检查..." | tee -a logs/text2vec.log
        docker compose -f docker-compose.core.yml exec -T text2vec-model2vec sh -c "apt-get update && apt-get install -y curl" || true
        
        # 等待服务就绪
        timeout 120 bash -c 'until curl -f http://localhost:8081/docs; do echo "等待text2vec-model2vec..." | tee -a logs/text2vec.log; sleep 3; done'
        # 注意：这里使用8081是因为在docker-compose.core.yml中将容器的8080端口映射到了宿主机的8081端口
        
        echo "text2vec-model2vec服务就绪" | tee -a logs/text2vec.log
        
    - name: Test text2vec-model2vec functionality
      id: text2vec-test
      run: |
        echo "测试text2vec-model2vec功能..." | tee -a logs/text2vec.log
        
        # 测试健康检查端点
        echo "测试健康检查端点..." | tee -a logs/text2vec.log
        curl -f http://localhost:8081/docs | tee -a logs/text2vec.log
        
        # 测试向量化功能
        echo "测试向量化功能..." | tee -a logs/text2vec.log
        curl -X POST "http://localhost:8081/vectorize" \
          -H "Content-Type: application/json" \
          -d '{"text":"测试文本"}' | tee -a logs/text2vec.log
        
        echo "status=success" >> $GITHUB_OUTPUT
        echo "text2vec-model2vec测试通过" | tee -a logs/text2vec.log
        
    - name: Upload text2vec-model2vec logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: text2vec-logs
        path: logs/text2vec.log
        retention-days: 7
        
    - name: Cleanup text2vec-model2vec
      if: always()
      run: docker compose -f docker-compose.core.yml stop text2vec-model2vec

  # ===========================================
  # 测试weaviate服务
  # ===========================================
  test-weaviate:
    name: "测试weaviate服务"
    runs-on: ubuntu-latest
    needs: test-text2vec
    if: ${{ inputs.test_mode == 'integrated' && needs.test-text2vec.outputs.text2vec-status == 'success' || inputs.test_mode == 'isolated' }}
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create logs directory
      run: mkdir -p logs
      
    - name: Prepare environment
      run: |
        cp .env.template .env
        echo "OPENAI_API_KEY=test_key" >> .env
        echo "HUGGINGFACE_API_KEY=test_key" >> .env
        
    - name: Start required services
      run: |
        echo "启动必要服务..." | tee logs/weaviate.log
        
        if [ "${{ inputs.test_mode }}" == "integrated" ]; then
          echo "集成测试模式: 使用已启动的text2vec-model2vec" | tee -a logs/weaviate.log
        else
          echo "独立测试模式: 启动text2vec-model2vec" | tee -a logs/weaviate.log
          docker compose -f docker-compose.core.yml up -d text2vec-model2vec 2>&1 | tee -a logs/weaviate.log
          
          # 等待text2vec-model2vec就绪
          timeout 120 bash -c 'until curl -f http://localhost:8081/docs; do echo "等待text2vec-model2vec..." | tee -a logs/weaviate.log; docker logs --tail=10 knowledge-rag-text2vec-model2vec | tee -a logs/text2vec.log; sleep 3; done'
        fi
        
        # 启动weaviate
        echo "启动weaviate服务..." | tee -a logs/weaviate.log
        docker compose -f docker-compose.core.yml up -d weaviate 2>&1 | tee -a logs/weaviate.log
        
        # 输出运行时日志
        echo "输出text2vec-model2vec运行时日志:" | tee -a logs/text2vec.log
        docker logs knowledge-rag-text2vec-model2vec | tee -a logs/text2vec.log
        
        echo "输出weaviate运行时日志:" | tee -a logs/weaviate.log
        docker logs knowledge-rag-weaviate | tee -a logs/weaviate.log
        
    - name: Wait for weaviate readiness
      run: |
        echo "等待weaviate服务就绪..." | tee -a logs/weaviate.log
        timeout 180 bash -c 'until curl -f http://localhost:8080/v1/.well-known/ready; do echo "等待Weaviate..." | tee -a logs/weaviate.log; docker logs --tail=10 knowledge-rag-weaviate | tee -a logs/weaviate.log; sleep 5; done'
        echo "weaviate服务就绪" | tee -a logs/weaviate.log
        
    - name: Test weaviate functionality
      id: weaviate-test
      run: |
        echo "测试weaviate功能..." | tee -a logs/weaviate.log
        
        # 测试元数据端点
        echo "测试元数据端点..." | tee -a logs/weaviate.log
        curl -X GET "http://localhost:8080/v1/meta" | jq . | tee -a logs/weaviate.log
        
        # 测试创建schema
        echo "测试创建schema..." | tee -a logs/weaviate.log
        curl -X POST "http://localhost:8080/v1/schema" \
          -H "Content-Type: application/json" \
          -d '{
            "class": "TestDocument",
            "description": "Test document class",
            "vectorizer": "text2vec-model2vec",
            "properties": [
              {
                "name": "title",
                "dataType": ["text"],
                "description": "Document title"
              },
              {
                "name": "content",
                "dataType": ["text"],
                "description": "Document content"
              }
            ]
          }' | tee -a logs/weaviate.log
        
        # 测试添加数据
        echo "测试添加数据..." | tee -a logs/weaviate.log
        curl -X POST "http://localhost:8080/v1/objects" \
          -H "Content-Type: application/json" \
          -d '{
            "class": "TestDocument",
            "properties": {
              "title": "测试文档",
              "content": "这是一个测试文档内容"
            }
          }' | tee -a logs/weaviate.log
        
        echo "weaviate测试通过" | tee -a logs/weaviate.log
        
    - name: Upload weaviate logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: weaviate-logs
        path: |
          logs/weaviate.log
          logs/text2vec.log
        retention-days: 7
        
    - name: Cleanup services
      if: always()
      run: docker compose -f docker-compose.core.yml down -v

  # ===========================================
  # 测试向量服务与应用集成
  # ===========================================
  test-vector-integration:
    name: "测试向量服务与应用集成"
    runs-on: ubuntu-latest
    needs: [test-text2vec, test-weaviate]
    if: ${{ inputs.test_mode == 'integrated' }}
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create logs directory
      run: mkdir -p logs
      
    - name: Prepare environment
      run: |
        cp .env.template .env
        echo "OPENAI_API_KEY=test_key" >> .env
        echo "HUGGINGFACE_API_KEY=test_key" >> .env
        
    - name: Start all required services
      run: |
        echo "启动所有必要服务..." | tee logs/integration.log
        docker compose -f docker-compose.core.yml up -d postgres redis neo4j text2vec-model2vec weaviate 2>&1 | tee -a logs/integration.log
        
        # 等待基础设施就绪
        timeout 120 bash -c 'until docker compose -f docker-compose.core.yml exec -T postgres pg_isready -U postgres; do echo "等待PostgreSQL..." | tee -a logs/integration.log; sleep 3; done'
        timeout 60 bash -c 'until docker compose -f docker-compose.core.yml exec -T redis redis-cli ping; do echo "等待Redis..." | tee -a logs/integration.log; sleep 2; done'
        timeout 180 bash -c 'until docker compose -f docker-compose.core.yml exec -T neo4j cypher-shell -u neo4j -p neo4j123 "RETURN 1"; do echo "等待Neo4j..." | tee -a logs/integration.log; sleep 5; done'
        timeout 120 bash -c 'until curl -f http://localhost:8081/docs; do echo "等待text2vec-model2vec..." | tee -a logs/integration.log; sleep 3; done'
        timeout 180 bash -c 'until curl -f http://localhost:8080/v1/.well-known/ready; do echo "等待Weaviate..." | tee -a logs/integration.log; sleep 5; done'
        
        # 启动应用服务
        echo "启动应用服务..." | tee -a logs/integration.log
        docker compose -f docker-compose.core.yml up -d --build api-gateway vector-service 2>&1 | tee -a logs/integration.log
        
        # 等待应用服务就绪
        timeout 120 bash -c 'until curl -f http://localhost:8000/health; do echo "等待API Gateway..." | tee -a logs/integration.log; sleep 3; done'
        timeout 120 bash -c 'until curl -f http://localhost:8003/health; do echo "等待Vector Service..." | tee -a logs/integration.log; sleep 3; done'
        
    - name: Test vector service integration
      run: |
        echo "测试向量服务集成..." | tee -a logs/integration.log
        
        # 测试向量服务API
        echo "测试向量服务API..." | tee -a logs/integration.log
        curl -X GET "http://localhost:8003/health" | tee -a logs/integration.log
        
        # 测试通过API Gateway访问向量服务
        echo "测试通过API Gateway访问向量服务..." | tee -a logs/integration.log
        curl -X GET "http://localhost:8000/api/v1/vector/health" | tee -a logs/integration.log
        
        echo "向量服务集成测试通过" | tee -a logs/integration.log
        
    - name: Upload integration logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-logs
        path: logs/integration.log
        retention-days: 7
        
    - name: Cleanup all services
      if: always()
      run: docker compose -f docker-compose.core.yml down -v