# Knowledge RAG System - CI/CD Pipeline
# GitHub Actions 工作流配置

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: knowledge-rag

jobs:
  # ===========================================
  # 代码质量检查
  # ===========================================
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Cache uv dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: |
        uv sync --dev --prerelease=allow
        
    - name: Run Black (Code Formatting)
      continue-on-error: true
      run: |
        uv run --with black black --check --diff . > black-report.txt 2>&1 || true
        echo "Black formatting check completed"
        uv run --with black black
        echo "Black code formatting completed"
      
    - name: Run isort (Import Sorting)
      continue-on-error: true
      run: |
        uv run --with isort isort --check-only --diff . > isort-report.txt 2>&1 || true
        echo "isort import sorting check completed"
        uv run --with isort isort .
        echo "isort import sorting completed"
      
    - name: Run Flake8 (Linting)
      continue-on-error: true
      run: |
        uv run --with flake8 flake8 --output-file=flake8-report.txt --format=default services/ shared/ scripts/ tests/ || true
        echo "Flake8 linting check completed"
      
    - name: Run MyPy (Type Checking)
      continue-on-error: true
      run: |
        mkdir -p mypy-reports
        cd services/vector-service && uv run --with mypy mypy --txt-report ../../mypy-reports/vector-service app/ || true
        cd ../../ && cd services/graph-service && uv run --with mypy mypy --txt-report ../../mypy-reports/graph-service app/ || true
        cd ../../ && uv run --with mypy mypy --txt-report mypy-reports/shared shared/ || true
        echo "MyPy type checking completed"
      
    - name: Run Bandit (Security Linting)
      continue-on-error: true
      run: |
        uv run --with bandit bandit -r services/ shared/ -f json -o bandit-report.json || true
        uv run --with bandit bandit -r services/ shared/ -f txt -o bandit-report.txt || true
        echo "Bandit security linting completed"
      
    - name: Generate code quality summary
      if: always()
      run: |
        echo "# Code Quality Check Summary" > code-quality-summary.md
        echo "" >> code-quality-summary.md
        echo "## Black (Code Formatting)" >> code-quality-summary.md
        if [ -f black-report.txt ]; then
          if [ -s black-report.txt ]; then
            echo "❌ Issues found:" >> code-quality-summary.md
            echo '```' >> code-quality-summary.md
            head -20 black-report.txt >> code-quality-summary.md
            echo '```' >> code-quality-summary.md
          else
            echo "✅ No formatting issues found" >> code-quality-summary.md
          fi
        fi
        echo "" >> code-quality-summary.md
        
        echo "## isort (Import Sorting)" >> code-quality-summary.md
        if [ -f isort-report.txt ]; then
          if [ -s isort-report.txt ]; then
            echo "❌ Issues found:" >> code-quality-summary.md
            echo '```' >> code-quality-summary.md
            head -20 isort-report.txt >> code-quality-summary.md
            echo '```' >> code-quality-summary.md
          else
            echo "✅ No import sorting issues found" >> code-quality-summary.md
          fi
        fi
        echo "" >> code-quality-summary.md
        
        echo "## Flake8 (Linting)" >> code-quality-summary.md
        if [ -f flake8-report.txt ]; then
          if [ -s flake8-report.txt ]; then
            echo "❌ Issues found:" >> code-quality-summary.md
            echo '```' >> code-quality-summary.md
            head -20 flake8-report.txt >> code-quality-summary.md
            echo '```' >> code-quality-summary.md
          else
            echo "✅ No linting issues found" >> code-quality-summary.md
          fi
        fi
        echo "" >> code-quality-summary.md
        
        echo "## MyPy (Type Checking)" >> code-quality-summary.md
        if [ -d mypy-reports ]; then
          for service in vector-service graph-service shared; do
            if [ -f "mypy-reports/$service/index.txt" ]; then
              echo "### $service" >> code-quality-summary.md
              if grep -q "Success" "mypy-reports/$service/index.txt"; then
                echo "✅ No type checking issues found" >> code-quality-summary.md
              else
                echo "❌ Type checking issues found" >> code-quality-summary.md
              fi
            fi
          done
        fi
        echo "" >> code-quality-summary.md
        
        echo "## Bandit (Security Linting)" >> code-quality-summary.md
        if [ -f bandit-report.json ]; then
          issues=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "0")
          if [ "$issues" -gt 0 ]; then
            echo "❌ $issues security issues found" >> code-quality-summary.md
            echo '```' >> code-quality-summary.md
            head -20 bandit-report.txt >> code-quality-summary.md
            echo '```' >> code-quality-summary.md
          else
            echo "✅ No security issues found" >> code-quality-summary.md
          fi
        fi
        
        echo "Code quality summary generated"
      
    - name: Upload code quality results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-results
        path: |
          black-report.txt
          isort-report.txt
          flake8-report.txt
          mypy-reports/
          bandit-report.json
          bandit-report.txt
          code-quality-summary.md
          .mypy_cache/

  # ===========================================
  # 单元测试
  # ===========================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Cache uv dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: |
        uv sync --dev --prerelease=allow
        
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres123@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: testing
      run: |
        uv run --with pytest --with pytest-cov --with pytest-asyncio pytest tests/unit/ -v --cov=tests --cov=scripts
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          htmlcov/
          coverage.xml
          pytest-report.xml

  # ===========================================
  # 集成测试
  # ===========================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Start services with Docker Compose
      run: |
        mkdir -p logs
        cp .env.template .env
        echo "Starting Docker Compose services..." | tee logs/docker-compose-startup.log
        docker compose -f docker-compose.yml up -d --build 2>&1 | tee -a logs/docker-compose-startup.log
        echo "Docker Compose services started" | tee -a logs/docker-compose-startup.log
        
    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to be ready..." | tee -a logs/docker-compose-startup.log
        timeout 300 bash -c 'until curl -f http://localhost:8000/health; do echo "Waiting for API Gateway health check..." | tee -a logs/docker-compose-startup.log; sleep 5; done' 2>&1 | tee -a logs/docker-compose-startup.log
        echo "Service readiness check completed" | tee -a logs/docker-compose-startup.log
        
    - name: Run integration tests
      continue-on-error: true
      run: |
        docker compose exec -T api-gateway pytest tests/integration/ -v --junitxml=integration-test-results.xml --html=integration-test-report.html --self-contained-html || true
        echo "Integration tests completed"
        
    - name: Collect service logs
      if: always()
      run: |
        mkdir -p logs
        echo "Collecting Docker Compose service logs..." | tee -a logs/docker-compose-startup.log
        docker compose logs > logs/docker-compose-runtime.log 2>&1
        echo "Service logs collection completed" | tee -a logs/docker-compose-startup.log
        
    - name: Upload integration test results and logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results-and-logs
        path: |
          logs/
          integration-test-results.xml
          integration-test-report.html
        retention-days: 30
          
    - name: Cleanup
      if: always()
      run: docker compose down -v

  # ===========================================
  # 安全扫描
  # ===========================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [code-quality]    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      continue-on-error: true
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'
        
    - name: Run Trivy vulnerability scanner (JSON format)
      continue-on-error: true
      run: |
        docker run --rm -v "${{ github.workspace }}:/workspace" aquasec/trivy:latest fs --format json --output /workspace/trivy-results.json /workspace || true
        echo "Trivy JSON scan completed"
        
    - name: Run Trivy vulnerability scanner (Table format)
      continue-on-error: true
      run: |
        docker run --rm -v "${{ github.workspace }}:/workspace" aquasec/trivy:latest fs --format table --output /workspace/trivy-results.txt /workspace || true
        echo "Trivy table scan completed"
        
    - name: Generate security scan summary
      if: always()
      run: |
        echo "# Security Scan Summary" > security-scan-summary.md
        echo "" >> security-scan-summary.md
        echo "## Trivy Vulnerability Scanner" >> security-scan-summary.md
        if [ -f trivy-results.json ]; then
          vulnerabilities=$(jq '.Results[]?.Vulnerabilities // [] | length' trivy-results.json 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
          if [ "$vulnerabilities" -gt 0 ]; then
            echo "❌ $vulnerabilities vulnerabilities found" >> security-scan-summary.md
            echo '```' >> security-scan-summary.md
            head -30 trivy-results.txt >> security-scan-summary.md
            echo '```' >> security-scan-summary.md
          else
            echo "✅ No vulnerabilities found" >> security-scan-summary.md
          fi
        else
          echo "⚠️ Scan results not available" >> security-scan-summary.md
        fi
        echo "Security scan summary generated"
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          trivy-results.sarif
          trivy-results.json
          trivy-results.txt
          security-scan-summary.md

  # ===========================================
  # Docker 镜像构建
  # ===========================================
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    strategy:
      matrix:
        service: 
          - api-gateway
          - auth-service
          - document-service
          - vector-service
          - llm-service
          - qa-service
          - knowledge-graph-service
          - notification-service
          - graph-service
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: services/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===========================================
  # 部署到开发环境
  # ===========================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to development environment
      run: |
        echo "Deploying to development environment..."
        # 这里添加实际的部署脚本
        # 例如：kubectl apply -f k8s/dev/ 或者其他部署命令
        
  # ===========================================
  # 部署到生产环境
  # ===========================================
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # 这里添加实际的生产部署脚本
        # 例如：kubectl apply -f k8s/prod/ 或者其他部署命令

  # ===========================================
  # 通知
  # ===========================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, security-scan]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.code-quality.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' }}
      run: |
        echo "✅ All checks passed successfully!"
        
    - name: Notify on failure
      if: ${{ needs.code-quality.result == 'failure' || needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' }}
      run: |
        echo "❌ Some checks failed. Please review the results."
        exit 1