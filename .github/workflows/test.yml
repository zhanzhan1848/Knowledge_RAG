# Knowledge RAG System - 测试工作流
# 专门用于运行各种类型的测试

name: Test Suite

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨2点运行完整测试套件
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.10'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'
  ELASTICSEARCH_VERSION: '8.11.0'
  NEO4J_VERSION: '5.15'

jobs:
  # ===========================================
  # 测试矩阵 - 多Python版本测试
  # ===========================================
  test-matrix:
    name: Test Matrix (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11']
        
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Cache uv dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-${{ matrix.python-version }}-
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: |
        uv sync --dev --prerelease=allow
        
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres123@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: testing
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uv run pytest tests/unit/ -v --tb=short \
               --cov=services --cov=shared --cov=libs \
               --cov-report=xml --cov-report=term-missing \
               --junitxml=pytest-results-${{ matrix.python-version }}.xml
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          pytest-results-${{ matrix.python-version }}.xml
          coverage.xml

  # ===========================================
  # 服务特定测试
  # ===========================================
  service-tests:
    name: Service Tests (${{ matrix.service }})
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        service:
          - api-gateway
          - auth-service
          - document-service
          - vector-service
          - llm-service
          - qa-service
          - knowledge-graph-service
          - notification-service
          - graph-service
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Cache uv dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
        
    - name: Install dependencies
      run: |
        uv sync --dev --prerelease=allow
        
    - name: Run service-specific tests
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres123@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: testing
        PYTHONPATH: ${{ github.workspace }}
      run: |
        if [ -d "tests/services/${{ matrix.service }}" ]; then
          uv run pytest tests/services/${{ matrix.service }}/ -v --tb=short \
                 --cov=services/${{ matrix.service }} \
                 --cov-report=xml --cov-report=term-missing \
                 --junitxml=pytest-${{ matrix.service }}.xml
        else
          echo "No specific tests found for ${{ matrix.service }}"
        fi
        
    - name: Upload service test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: service-test-results-${{ matrix.service }}
        path: |
          pytest-${{ matrix.service }}.xml
          coverage.xml

  # ===========================================
  # 端到端测试
  # ===========================================
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [test-matrix]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create test environment file
      run: |
        cp .env.template .env
        # 设置测试环境变量
        sed -i 's/your_openai_api_key_here/test_key/' .env
        sed -i 's/your_jwt_secret_key_here_change_in_production/test_jwt_secret_key_for_testing_only/' .env
        sed -i 's/ENVIRONMENT=development/ENVIRONMENT=testing/' .env
        
    - name: Start all services
      run: |
        docker compose -f docker-compose.yml up -d --build
        
    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to start..."
        sleep 60
        
        # 检查各个服务的健康状态
        services=("api-gateway:8000" "auth-service:8001" "document-service:8002" "vector-service:8003" "llm-service:8004" "qa-service:8005" "knowledge-graph-service:8006" "notification-service:8007" "graph-service:8008")
        
        for service in "${services[@]}"; do
          service_name=$(echo $service | cut -d':' -f1)
          port=$(echo $service | cut -d':' -f2)
          echo "Checking $service_name on port $port..."
          
          timeout 120 bash -c "until curl -f http://localhost:$port/health 2>/dev/null; do echo 'Waiting for $service_name...'; sleep 5; done" || {
            echo "$service_name failed to start"
            docker compose logs $service_name
          }
        done
        
    - name: Run end-to-end tests
      run: |
        if [ -d "tests/e2e" ]; then
          uv run pytest tests/e2e/ -v --tb=short --junitxml=pytest-e2e.xml
        else
          echo "No E2E tests found, creating basic connectivity tests"
          python -c "
        import requests
        import sys
        
        services = {
            'API Gateway': 'http://localhost:8000/health',
            'Auth Service': 'http://localhost:8001/health',
            'Document Service': 'http://localhost:8002/health',
            'Vector Service': 'http://localhost:8003/health',
            'LLM Service': 'http://localhost:8004/health',
            'QA Service': 'http://localhost:8005/health',
            'Knowledge Graph Service': 'http://localhost:8006/health',
            'Notification Service': 'http://localhost:8007/health',
            'Graph Service': 'http://localhost:8008/health'
        }
        
        failed = []
        for name, url in services.items():
            try:
                response = requests.get(url, timeout=10)
                if response.status_code == 200:
                    print(f'✅ {name}: OK')
                else:
                    print(f'❌ {name}: HTTP {response.status_code}')
                    failed.append(name)
            except Exception as e:
                print(f'❌ {name}: {e}')
                failed.append(name)
        
        if failed:
            print(f'Failed services: {failed}')
            sys.exit(1)
        else:
            print('All services are healthy!')
          "
        fi
        
    - name: Collect service logs
      if: always()
      run: |
        mkdir -p logs
        docker compose logs --no-color > logs/all-services.log
        
        # 收集各个服务的单独日志
        services=("api-gateway" "auth-service" "document-service" "vector-service" "llm-service" "qa-service" "knowledge-graph-service" "notification-service" "graph-service")
        for service in "${services[@]}"; do
          docker compose logs --no-color $service > logs/$service.log 2>/dev/null || echo "No logs for $service"
        done
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          logs/
          pytest-e2e.xml
          
    - name: Cleanup
      if: always()
      run: docker compose down -v

  # ===========================================
  # 性能测试
  # ===========================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Install dependencies
      run: |
        uv sync --dev --prerelease=allow
        
    - name: Run performance tests
      run: |
        if [ -d "tests/performance" ]; then
          uv run pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json
        else
          echo "No performance tests found"
        fi
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: benchmark.json

  # ===========================================
  # 测试报告汇总
  # ===========================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-matrix, service-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate test summary
      run: |
        echo "# 测试结果汇总" > test-summary.md
        echo "" >> test-summary.md
        echo "## 测试状态" >> test-summary.md
        echo "" >> test-summary.md
        
        if [ "${{ needs.test-matrix.result }}" == "success" ]; then
          echo "✅ 矩阵测试: 通过" >> test-summary.md
        else
          echo "❌ 矩阵测试: 失败" >> test-summary.md
        fi
        
        if [ "${{ needs.service-tests.result }}" == "success" ]; then
          echo "✅ 服务测试: 通过" >> test-summary.md
        else
          echo "❌ 服务测试: 失败" >> test-summary.md
        fi
        
        if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
          echo "✅ 端到端测试: 通过" >> test-summary.md
        else
          echo "❌ 端到端测试: 失败" >> test-summary.md
        fi
        
        echo "" >> test-summary.md
        echo "## 测试覆盖率" >> test-summary.md
        echo "" >> test-summary.md
        echo "详细的覆盖率报告请查看构建产物。" >> test-summary.md
        
        cat test-summary.md
        
    - name: Upload test summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md