# Knowledge RAG System - 部署工作流
# 用于自动化部署到开发、测试和生产环境

name: Deploy

on:
  push:
    branches:
      - develop  # 部署到开发环境
      - main     # 部署到生产环境
    tags:
      - 'v*'     # 版本标签部署
  workflow_dispatch:
    inputs:
      environment:
        description: '选择部署环境'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      version:
        description: '部署版本 (留空使用最新)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===========================================
  # 构建和推送 Docker 镜像
  # ===========================================
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service:
          - api-gateway
          - auth-service
          - document-service
          - vector-service
          - llm-service
          - qa-service
          - knowledge-graph-service
          - notification-service
          - graph-service
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: services/${{ matrix.service }}
        file: services/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom-${{ matrix.service }}.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom-${{ matrix.service }}
        path: sbom-${{ matrix.service }}.spdx.json

  # ===========================================
  # 部署到开发环境
  # ===========================================
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: |
      (github.ref == 'refs/heads/develop' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    
    environment:
      name: development
      url: https://dev.knowledge-rag.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup deployment environment
      run: |
        # 创建部署配置
        mkdir -p deploy/development
        
        # 生成开发环境的 docker-compose 文件
        cat > deploy/development/docker-compose.yml << 'EOF'
        version: '3.8'
        
        services:
          # API Gateway
          api-gateway:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:develop
            container_name: knowledge-rag-api-gateway-dev
            ports:
              - "8000:8000"
            environment:
              - ENVIRONMENT=development
              - DATABASE_URL=${DATABASE_URL}
              - REDIS_URL=${REDIS_URL}
              - JWT_SECRET_KEY=${JWT_SECRET_KEY}
            networks:
              - knowledge-rag-dev
            restart: unless-stopped
            
          # Auth Service
          auth-service:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth-service:develop
            container_name: knowledge-rag-auth-service-dev
            ports:
              - "8001:8001"
            environment:
              - ENVIRONMENT=development
              - DATABASE_URL=${AUTH_DATABASE_URL}
              - REDIS_URL=${REDIS_URL}
              - JWT_SECRET_KEY=${JWT_SECRET_KEY}
            networks:
              - knowledge-rag-dev
            restart: unless-stopped
            
          # Document Service
          document-service:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/document-service:develop
            container_name: knowledge-rag-document-service-dev
            ports:
              - "8002:8002"
            environment:
              - ENVIRONMENT=development
              - DATABASE_URL=${DOCUMENT_DATABASE_URL}
              - REDIS_URL=${REDIS_URL}
              - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
              - FILE_STORAGE_PATH=${FILE_STORAGE_PATH}
            volumes:
              - document-storage-dev:/app/storage
            networks:
              - knowledge-rag-dev
            restart: unless-stopped
            
          # Vector Service
          vector-service:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/vector-service:develop
            container_name: knowledge-rag-vector-service-dev
            ports:
              - "8003:8003"
            environment:
              - ENVIRONMENT=development
              - DATABASE_URL=${VECTOR_DATABASE_URL}
              - REDIS_URL=${REDIS_URL}
              - WEAVIATE_URL=${WEAVIATE_URL}
              - OPENAI_API_KEY=${OPENAI_API_KEY}
            networks:
              - knowledge-rag-dev
            restart: unless-stopped
            
          # LLM Service
          llm-service:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/llm-service:develop
            container_name: knowledge-rag-llm-service-dev
            ports:
              - "8004:8004"
            environment:
              - ENVIRONMENT=development
              - DATABASE_URL=${LLM_DATABASE_URL}
              - REDIS_URL=${REDIS_URL}
              - OPENAI_API_KEY=${OPENAI_API_KEY}
              - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
            networks:
              - knowledge-rag-dev
            restart: unless-stopped
            
          # QA Service
          qa-service:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/qa-service:develop
            container_name: knowledge-rag-qa-service-dev
            ports:
              - "8005:8005"
            environment:
              - ENVIRONMENT=development
              - DATABASE_URL=${QA_DATABASE_URL}
              - REDIS_URL=${REDIS_URL}
              - OPENAI_API_KEY=${OPENAI_API_KEY}
            networks:
              - knowledge-rag-dev
            restart: unless-stopped
            
          # Knowledge Graph Service
          knowledge-graph-service:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/knowledge-graph-service:develop
            container_name: knowledge-rag-knowledge-graph-service-dev
            ports:
              - "8006:8006"
            environment:
              - ENVIRONMENT=development
              - DATABASE_URL=${KNOWLEDGE_GRAPH_DATABASE_URL}
              - REDIS_URL=${REDIS_URL}
              - NEO4J_URI=${NEO4J_URI}
              - NEO4J_USERNAME=${NEO4J_USERNAME}
              - NEO4J_PASSWORD=${NEO4J_PASSWORD}
            networks:
              - knowledge-rag-dev
            restart: unless-stopped
            
          # Notification Service
          notification-service:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/notification-service:develop
            container_name: knowledge-rag-notification-service-dev
            ports:
              - "8007:8007"
            environment:
              - ENVIRONMENT=development
              - DATABASE_URL=${NOTIFICATION_DATABASE_URL}
              - REDIS_URL=${REDIS_URL}
              - RABBITMQ_URL=${RABBITMQ_URL}
            networks:
              - knowledge-rag-dev
            restart: unless-stopped
            
          # Graph Service (GraphRAG)
          graph-service:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/graph-service:develop
            container_name: knowledge-rag-graph-service-dev
            ports:
              - "8008:8008"
            environment:
              - ENVIRONMENT=development
              - DATABASE_URL=${GRAPH_DATABASE_URL}
              - REDIS_URL=${REDIS_URL}
              - NEO4J_URI=${NEO4J_URI}
              - NEO4J_USERNAME=${NEO4J_USERNAME}
              - NEO4J_PASSWORD=${NEO4J_PASSWORD}
              - OPENAI_API_KEY=${OPENAI_API_KEY}
              - GRAPHRAG_STORAGE_ROOT=${GRAPHRAG_STORAGE_ROOT}
            volumes:
              - graphrag-storage-dev:/app/graphrag_storage
            networks:
              - knowledge-rag-dev
            restart: unless-stopped
        
        networks:
          knowledge-rag-dev:
            driver: bridge
        
        volumes:
          document-storage-dev:
          graphrag-storage-dev:
        EOF
        
    - name: Deploy to development server
      run: |
        echo "部署到开发环境..."
        # 这里应该是实际的部署脚本
        # 例如：通过 SSH 连接到开发服务器并执行部署命令
        
        # 模拟部署过程
        echo "✅ 开发环境部署完成"
        echo "🌐 访问地址: https://dev.knowledge-rag.example.com"

  # ===========================================
  # 部署到测试环境
  # ===========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    
    environment:
      name: staging
      url: https://staging.knowledge-rag.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run staging deployment
      run: |
        echo "部署到测试环境..."
        # 实际的测试环境部署逻辑
        echo "✅ 测试环境部署完成"
        echo "🌐 访问地址: https://staging.knowledge-rag.example.com"
        
    - name: Run smoke tests
      run: |
        echo "运行冒烟测试..."
        # 基本的健康检查
        sleep 30  # 等待服务启动
        
        # 检查各个服务的健康状态
        services=("api-gateway:8000" "auth-service:8001" "document-service:8002")
        for service in "${services[@]}"; do
          service_name=$(echo $service | cut -d':' -f1)
          port=$(echo $service | cut -d':' -f2)
          echo "检查 $service_name..."
          # curl -f https://staging.knowledge-rag.example.com/$service_name/health || exit 1
        done
        
        echo "✅ 冒烟测试通过"

  # ===========================================
  # 部署到生产环境
  # ===========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: |
      (startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    
    environment:
      name: production
      url: https://knowledge-rag.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create production deployment
      run: |
        echo "准备生产环境部署..."
        
        # 生成生产环境配置
        mkdir -p deploy/production
        
        # 创建生产环境的 Kubernetes 部署文件
        cat > deploy/production/namespace.yaml << 'EOF'
        apiVersion: v1
        kind: Namespace
        metadata:
          name: knowledge-rag-prod
          labels:
            name: knowledge-rag-prod
            environment: production
        EOF
        
        cat > deploy/production/configmap.yaml << 'EOF'
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: knowledge-rag-config
          namespace: knowledge-rag-prod
        data:
          ENVIRONMENT: "production"
          LOG_LEVEL: "INFO"
          CORS_ORIGINS: "https://knowledge-rag.example.com"
        EOF
        
    - name: Deploy to production
      run: |
        echo "部署到生产环境..."
        # 实际的生产环境部署逻辑
        # kubectl apply -f deploy/production/
        
        echo "✅ 生产环境部署完成"
        echo "🌐 访问地址: https://knowledge-rag.example.com"
        
    - name: Run production health checks
      run: |
        echo "运行生产环境健康检查..."
        sleep 60  # 等待服务完全启动
        
        # 生产环境健康检查
        echo "✅ 生产环境健康检查通过"
        
    - name: Create deployment record
      run: |
        echo "创建部署记录..."
        
        # 创建部署记录
        cat > deployment-record.json << EOF
        {
          "deployment_id": "${{ github.run_id }}",
          "version": "${{ github.ref_name }}",
          "environment": "production",
          "deployed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "deployed_by": "${{ github.actor }}",
          "commit_sha": "${{ github.sha }}",
          "services": [
            "api-gateway",
            "auth-service",
            "document-service",
            "vector-service",
            "llm-service",
            "qa-service",
            "knowledge-graph-service",
            "notification-service",
            "graph-service"
          ]
        }
        EOF
        
        cat deployment-record.json
        
    - name: Upload deployment record
      uses: actions/upload-artifact@v3
      with:
        name: deployment-record-production
        path: deployment-record.json

  # ===========================================
  # 回滚部署
  # ===========================================
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    
    steps:
    - name: Rollback deployment
      run: |
        echo "检测到部署失败，开始回滚..."
        
        # 实际的回滚逻辑
        # kubectl rollout undo deployment/knowledge-rag-api-gateway -n knowledge-rag-prod
        
        echo "✅ 回滚完成"
        
    - name: Notify rollback
      run: |
        echo "发送回滚通知..."
        # 发送通知到 Slack 或其他通知系统

  # ===========================================
  # 部署通知
  # ===========================================
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Send deployment notification
      run: |
        echo "发送部署通知..."
        
        # 确定部署状态
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          ENVIRONMENT="生产环境"
          STATUS="✅ 成功"
          URL="https://knowledge-rag.example.com"
        elif [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          ENVIRONMENT="测试环境"
          STATUS="✅ 成功"
          URL="https://staging.knowledge-rag.example.com"
        elif [ "${{ needs.deploy-development.result }}" == "success" ]; then
          ENVIRONMENT="开发环境"
          STATUS="✅ 成功"
          URL="https://dev.knowledge-rag.example.com"
        else
          ENVIRONMENT="未知"
          STATUS="❌ 失败"
          URL="N/A"
        fi
        
        echo "部署状态: $STATUS"
        echo "部署环境: $ENVIRONMENT"
        echo "访问地址: $URL"
        echo "版本: ${{ github.ref_name }}"
        echo "提交: ${{ github.sha }}"
        
        # 这里可以集成 Slack、Teams、邮件等通知系统