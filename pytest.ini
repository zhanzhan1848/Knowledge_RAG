# Knowledge RAG System - Pytest 配置文件
# 配置测试运行参数、标记和输出格式

[tool:pytest]
# 测试发现配置
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# 测试标记定义
markers =
    unit: 单元测试 - 测试单个函数或类的功能
    integration: 集成测试 - 测试多个组件之间的交互
    e2e: 端到端测试 - 测试完整的用户工作流
    performance: 性能测试 - 测试系统性能和负载能力
    slow: 慢速测试 - 运行时间较长的测试
    auth: 认证相关测试
    document: 文档处理相关测试
    vector: 向量搜索相关测试
    qa: 问答相关测试
    api: API接口测试
    database: 数据库相关测试
    cache: 缓存相关测试
    security: 安全相关测试
    mock: 使用模拟对象的测试

# 输出配置
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --color=yes
    --durations=10
    --cov=src
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80
    --junitxml=reports/junit.xml
    --html=reports/report.html
    --self-contained-html

# 异步测试配置
asyncio_mode = auto

# 过滤警告
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:httpx.*
    ignore::UserWarning:asyncio.*

# 最小版本要求
minversion = 7.0

# 测试超时配置（秒）
timeout = 300
timeout_method = thread

# 并行测试配置
# 使用 pytest-xdist 进行并行测试
# -n auto 会自动检测CPU核心数
# 可以通过 pytest -n 4 手动指定进程数

# 测试数据目录
testmon_datafile = .testmondata

# 缓存配置
cache_dir = .pytest_cache

# 日志配置
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# 自动使用的fixtures
usefixtures = 
    async_event_loop

# 测试收集配置
collect_ignore = [
    "setup.py",
    "conftest.py",
    "__pycache__",
    ".git",
    ".pytest_cache",
    "htmlcov",
    "reports"
]

# 空测试文件处理
empty_parameter_set_mark = xfail

# 测试发现模式
consider_namespace_packages = true